#!/usr/bin/env node
var argv = require('minimist')(process.argv.slice(2));
var aws = require('aws-sdk');
var Bottleneck = require('bottleneck');
var db = require('../build/util/db');
var fs = require('fs');
var logger = require('../build/logger');
var q = require('q');
var testData = require('../config/test-data');

if (argv.h) {
  [
    'This script loads data into a DynamoDB instance.  You must provide an environment (dev, staging, or prod),',
    'and the kind of data to load (events, disciplines, or unit testing data).',
    'We recommend you pipe the logs through bunyan using the short format.',
    'Example: ',
    '    /scripts/load-data -v ./ops/events.json -d ./ops/disciplines.json -e staging | bunyan -o short',
    'Note: the script is rate-limited, so it may take a bit.',
    'Options:',
    '  -h Show this help message.',
    '  -e The environment to load the data into',
    '  -t Load test data',
    '  -v Load events from file',
    '  -d Load disciplines from file',
    '  -p (optional) AWS endpoint',
    '  -r (optional) AWS region'
  ].forEach((line) => console.log(line));
  process.exit(0);
}

console.log(argv);

var config;
if (argv.e === 'prod') {
  config = require('../config/config-prod');
} else if (argv.e === 'staging' || argv.e === 'dev' ) {
  config = require('../config/config-dev');
} else {
  console.error('Environment is required and must be one of: dev, staging, prod');
  process.exit(1);
}

aws.config.update({
  region: argv.r || config.aws.region,
  endpoint: argv.p || config.aws.endpoint
});

Bottleneck.Promise = q;
var limiter = new Bottleneck(2, 1000, 0);

if (argv.t) {
  logger.info('inserting test data.');
  testData.contacts.forEach(function(contact) {
    limiter.submit(db.createContact, contact);
  });

  testData.users.forEach(function(user) {
    db.addUser(user).then((res) => {
      testData.projects.forEach((project) => {
        if (project.username === user.username) {
          project.userId = res.userId;
          limiter.submit(db.addProject, project);
        }
      });
    });
  });

  testData.disciplines.forEach(function(discipline) {
    limiter.submit(db.addDiscipline, discipline);
  });

  testData.events.forEach(function(testEvent) {
    limiter.submit(db.addEvent, testEvent);
  });

  var portfolioDao = new PortfolioDao();
  testData.portfolios.forEach((portfolio) => {
    portfolioDao.createPortfolio(portfolio.username, portfolio.title, portfolio.description, portfolio.imageUrl, portfolio.items);
  });
}

if (argv.d) {
  var disciplines = JSON.parse(fs.readFileSync(argv.d));
  disciplines.forEach(function(discipline) {
    logger.info('Submitting discipline to rate limiter to add to the db', discipline);
    limiter.schedule(db.addDiscipline, discipline);
  });
}

if (argv.v) {
  var events = JSON.parse(fs.readFileSync(argv.v));
  events.forEach((eventToAdd) => {
    logger.info('Submitting event to rate limiter to add to the db', eventToAdd);
    limiter.schedule(db.addEvent, eventToAdd);
  });
}
